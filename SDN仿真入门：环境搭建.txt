
SDN仿真入门：环境搭建
十月 18, 2013SDN仿真	

从今天开始，我会把之前SDN实验中记录的文档贴在我的博客中，供大家一起探讨和学习，开源精神我虽然还不完全理解，但我也是走在开源的前辈身后才学习到这么多知识。转载请注明出处。本仿真采用的方案是Mininet+Floodlight，全部又虚拟机完成，比较适合没有条件进行实际验证的同学。

一、安装VirtualBox

https://www.virtualbox.org/wiki/Linux_Downloads

根据操作系统和CPU选择合适文件，笔者选择的是Ubuntu12.04LTS i386。下载完毕后，双击安装deb包。

二、配置含Mininet的虚拟机镜像：

Mininet主要是虚拟OpenFlow交换机以及host节点。并且能构造除自定义的

拓扑。虚拟OpenFlow交换机主机是OpenvSwitch。

由于笔者使用的是32位Ubuntu系统，所以使用的是mininet1.0的镜像。如果使用amd64的Ubuntu系统，则可以使用mininet2.0，具体请参考：

http://www.openflow.org/wk/index.php/OpenFlow_Tutorial

本文就不对mininet2.0进行阐述了。首先下载

http://www.openflow.org/downloads/OpenFlowTutorial-101311.zip

下载完后，进入下载文件所在文件夹，解压时间较长。

$ unzip OpenFlowTutorial-101311.zip

进入VirtualBox，点击“新建”，名称自定，操作系统为Linux，版本为Ubuntu，设定内存256MB，选择已有的磁盘文件，就是刚才解压缩出来的.vdi。选择之后创建。

虚拟机创建好之后，先Ctrl+G，在网络选项卡中，点击右侧的绿色加号，按照默认添加vboxnet。以后都不用再次添加。接着选中新建的虚拟机，点击设置，同样是网络选项卡中，网卡1默认是NAT。点击网卡2，选中启用网络连接，连接方式选host-only，界面名称vboxnet0，混杂模式allow-all。至此虚拟机的配置就完成了

 

注：

(1)如果打开vbox文件提示网络设备的错误，请点击进入设置网络设备，再点确定。

(2)如果提示虚拟机分配的内存大于本机75%，又无法修改内存值时，请以gedit方式打开floodlightcontroller.vbox，找到31行如下

<Memory RAMSize=”2048″ PageFusion=”false”/>

将其中的2048修改为较小的值保存即可，笔者电脑内存只有2G，故修改为256

(3)如果提示PAE模式错误，请在虚拟机的设置->系统->处理器中勾选PAE

 

三.虚拟机基本操作：

虚拟机启动后，提示输入用户名openflow，密码openflow。先设置root密码

$ sudo passwd

http://packages.ubuntu.com/quantal/i386/libcanberra-gtk-module/download

首先获取IP地址：

$ ifconfig -a

此时应该有两个eth，如果其中并没有分配地址的话，执行：

$ sudo dhclient eth0          //eth0 eth1是刚才查询的接口号

$ sudo dhclient eth1

可以看到10.0开头的是NAT，而192.168.56.101是host-only adapter。

同样的回到主机终端中，输入

$ ifconfig -a

其中vboxnet项的IP地址就是主机用于和虚拟机通信的地址。笔者是192.168.56.1

接下来，试着从主机通过SSH访问虚拟机。打开终端：

$ ssh -X openflow@192.168.56.101

 

注：

(1)-X一定不能少，否则远程打开图形界面会提示Cannot Display

(2)如果提示Connection refused，可能是对方未安装ssh-server

(3)如果提示WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!，则需     要：

$ vi ~/.ssh/known_hosts

$ vi /root/.ssh/known_hosts   

前者是openflow身份，后者是root身份远程登录失败时的操作。在vi编辑器中删除所连接主机的信息（本文中，一般是全部删除），退出保存。

(4)按shift+pgup或pgdn可以翻页。

 

连接成功后，要求输入密码，即openflow。尝试：

$ xterm

 

四、搭建第一个网络

在虚拟机中，输入：

$ sudo mn –topo single,3 –mac –switch ovsk –controller remote

这一步中，添加了一个3个主机，1个openvSwitch交换机，1个远程控制器的拓扑。

读者可以尝试以下mininet的基本命令

mininet> nodes

mininet> help

mininet> h2 ifconfig

mininet> xterm h2 h3

当mininet需要清空重置时：

$ sudo mn -c

回到主机的终端中，下面介绍在ssh中对单个交换机的流表进行操作。

$ dpctl show tcp:127.0.0.1:6634

$ dpctl dump-flows tcp:127.0.0.1:6634

第一句是列出当前的端口状态和能力，我们看到交换机上对应1，2，3三个端口。第二句是列出当前的流表。现在，流表应当是空的。

在mininet中，我们来ping以下h2和h3

mininet> h2 ping -c3 h3

由于目前没有控制器，也没有任何流表，结果肯定是ping不通的

回到ssh，手动设置必要的规则，将h2,h3连通。

$ dpctl add-flow tcp:127.0.0.1:6634 in_port=1,actions=output:2

$ dpctl add-flow tcp:127.0.0.1:6634 in_port=2,actions=output:1

再次查看流表，可以验证刚才的操作。此时回到mininet中再次ping

mininet> h2 ping -c3 h3

这次就可以ping通了，如果还不行，可能是你的动作太慢了，在dump-flow中我们可以看到，idle_timeout=60，也就是说60秒没有新流到达这条规则就消失了。可以这样：

$ dpctl add-flow tcp:127.0.0.1:6634 in_port=1,idle_timeout=120,actions=output:2

 

五、Wireshark抓包分析

为了学习OpenFlow协议，抓包是必不可少的环节。在ssh中输入：

$ sudo wireshark &

 

注：第一次打开可能会报错。再次打卡即可。

 

打开Wireshark之后，capture interfac选loopback。删除多余的Filter，并在Filter中添加of。e

回到ssh，按ctrl+c结束wireshark对ssh的占用，并创建一个OF参考控制器：

$ controller ptcp:

这时再次在mininet中执行ping命令，可以看到诸如packet-in等OFP的包。

之后使用主机的控制器时，便不再对环回地址抓包，而是对虚拟机用于和主机通信的地址抓包，笔者是192.168.56.101

 

 

六、选择控制器平台

控制器平台种类繁多，大体由Python (POX/Ryu/NOX), Java (Beacon/Floodlight) , Ruby (Trema)三种语言编写。大家应按照自己熟悉的语言选择平台。笔者选择了Java编写的Beacon和Floodlight两种控制器平台。

先安装Java的运行环境。

$ sudo apt-get install build-essential default-jdk ant python-dev eclipse

 

FloodLight:

从Github下载Floodlight，Github是一个开源代码库以及版本控制系统

$ git clone git://github.com/floodlight/floodlight.git

$ cd floodlight

$ git checkout fl-last-passed-build

$ ant

运行Floodlight，请确保在floodlight目录下执行。成功运行的话，控制台会输出很多提示信息。

$ java -jar target/floodlight.jar

在主机终端中运行floodlight后，进入虚拟机中，输入：

$ sudo mn –controller=remote –ip=192.168.56.1 –port=6633

回到主机，打开http://localhost:8080/ui/index.html，这是floodlight的UI界面，我们可以看到，当前有1个交换机和两个主机连接到控制器上。至此，

SDN的mininet+floodlight仿真环境就搭建完毕了。

 

Beacon:

下载Java的开发环境JDK/JRE

http://www.oracle.com/technetwork/java/javase/downloads/jdk6-jsp-136632.html

在下载的目录中：

# chmod a+x jdk-6u45-linux-i586.bin

# ./jdk-6u45-linux-i586.bin

安装完后配置环境变量：

# vi /etc/profile

在末尾加上下列三行，保存退出，便可以开发Java了。

export JAVA_HOME=/usr/share/jdk1.6.0_45
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar

接下来下载Beacon的教程包，选择Beacon-Tutorial开头的文件

https://openflow.stanford.edu/static/beacon/releases/1.0.2/

打开eclipse，设置workspace,将下载的Beacon-Tutorial解压到workspace中。回到eclipse:

File->Import->General->Existing Projects into Workspace

选择/beacon-tutorial-1.0.2/beacon-tutorial-1.0.2/src作为root directory,选择其中所有的工程。

打开Beacon Main Target，双击main-local.target，点击右上角的Set as Target Platform。

点击Window->Preferences。点击左侧的Java -> Code Style -> Formatter，点击Import，选择路径/beacon-tutorial-1.0.2/src/beacon-1.0.2/beacon_style_settings.xml然后点击OK。

回到虚拟机中，笔者主机地址192.168.56.1，执行：

$ sudo killall controller

$ sudo mn –topo single,3 –mac –switch ovsk –controller remote,ip=192.168.56.1

回到eclipse，任意右击一个工程，点击Debug as，在左侧OSGi Framework，展开选中beacon Tutorial LearningSwitch，然后点击Debug

可以在Eclipse控制台中看到：

21:54:05.276 [pool-2-thread-2] INFO  n.b.core.internal.Controller – Switch connected from java.nio.channels.SocketChannel[connected local=/192.168.56.1:6633 remote=/192.168.56.101:58494]

21:54:05.283 [pool-2-thread-2] INFO  n.b.core.internal.Controller – Added switch OFSwitchImpl [Socket[addr=/192.168.56.101,port=58494,localport=6633] DPID[?]] to IOLoop IOLoop [id=0 stream_count=1]

至此，mininet+Beacon的SDN仿真平台便搭建完毕了。

 

注：

(1)如果连接错误，请先关闭Floodlight/Beacon，并检查6633端口：

$ su

# lsof -i:6633

如果有正在监听6633端口的进程，根据其pid关闭进程。

# kill <PID>

 

参考资料:

http://docs.projectfloodlight.org/display/floodlightcontroller/Installation+Guide

http://clusky.net/post/2012-07-24/floodlight-mininet-openflow-2

http://mininet.org/download/

https://forums.virtualbox.org/viewtopic.php?p=44859

http://www.openflow.org/wk/index.php/OpenFlow_Tutorial

http://blog.csdn.net/unbutun/article/details/7460067

http://www.cnblogs.com/xiangzi888/archive/2012/07/05/2578536.html

